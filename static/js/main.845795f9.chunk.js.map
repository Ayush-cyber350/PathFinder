{"version":3,"sources":["logo.svg","files/Node/Node.jsx","files/Algorithm/dijkstra.jsx","files/Pathfind.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","row","isStart","extraClassName","isFinish","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Pathfind","state","getInitialGrid","setState","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","endNode","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","map","rowIdx","nodeIdx","React","currentRow","createNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.845795f9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react';\r\nimport  '../Node.css';\r\nexport default class Node extends Component{\r\n    render(){\r\n        const {\r\n            col,\r\n            row,\r\n            isStart,\r\n            isFinish,\r\n        }= this.props;\r\n        const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : '';\r\n    \r\n        return(\r\n            <div id ={`node-${row}-${col}`} \r\n            className ={`node ${extraClassName}`}\r\n            >\r\n            </div>\r\n        );\r\n    }\r\n}","export function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","import React from \"react\";\r\nimport './Pathfind.css';\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"./Algorithm/dijkstra.jsx\";\r\n\r\nconst START_ROW =7 ;\r\nconst START_COL= 10;\r\nconst END_ROW = 6;\r\nconst END_COL =27;\r\n\r\nexport default class Pathfind extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            grid : []\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const grid = getInitialGrid();\r\n        this.setState({grid});\r\n    }\r\n    animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder){\r\n        for(let i=0; i<=visitedNodesInOrder.length;i++){\r\n            if(i===visitedNodesInOrder.length){\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10*i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className=\r\n                'node node-visited';\r\n            }, 10*i);\r\n        }\r\n    }\r\n    animateShortestPath(nodesInShortestPathOrder){\r\n        for(let i=0;i < nodesInShortestPathOrder.length;i++){\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node node-shortest-path';\r\n            }, 50 * i);\r\n        }\r\n    }\r\n\r\n    visualizeDijkstra(){\r\n        const {grid}= this.state;\r\n        const startNode = grid[START_ROW][START_COL];\r\n        const endNode = grid[END_ROW][END_COL];\r\n        const visitedNodesInOrder = dijkstra(grid,startNode,endNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode);\r\n        this.animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder);\r\n    }\r\n    render(){\r\n        const {grid}= this.state;\r\n        return(\r\n            <div>\r\n                <button onClick={()=>this.visualizeDijkstra()}>\r\n                    Visualize Shortest path using Dijkstra\r\n                    </button>\r\n                <div className ='grid'>\r\n                    {grid.map((row,rowIdx)=>{\r\n                        return (\r\n                            <div key={rowIdx}>\r\n                                {row.map((node,nodeIdx)=>{\r\n                                    const {row,col,isStart,isFinish,} = node;\r\n                                    return(\r\n                                        <Node \r\n                                        key={nodeIdx} \r\n                                        col={col} \r\n                                        row={row}\r\n                                        isFinish= {isFinish}\r\n                                        isStart={isStart}\r\n\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    \r\n    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n        \r\n}\r\nconst getInitialGrid= ()=>{\r\n    const grid = [];\r\n    for(let row =0;row <15 ;row++){\r\n        const currentRow=[];\r\n        for(let col =0; col<40;col++){\r\n            currentRow.push(createNode(col,row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\nconst createNode= (col,row) => {\r\n    return{\r\n        col,\r\n        row,\r\n        isStart: col=== START_COL && row===START_ROW,\r\n        isFinish: col===END_COL && row === END_ROW,\r\n        isVisited: false,\r\n        distance: Infinity,\r\n        previousNode: null\r\n    };\r\n}\r\n\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Pathfind from \"./files/Pathfind\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pathfind />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}